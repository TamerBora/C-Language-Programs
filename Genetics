//DNA Sekanslama ProgramÄ±


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void createMatrix(int *genes , size_t rows , size_t columns);
void printMatrix(const int matrix[][50],size_t rows, size_t columns);
int checkForPerfectMatch(const int matrix[][50],const int tar[],size_t rows , size_t columns);
int checkForPartialMatch(const int matrix[][50], const int tar[],size_t rows , size_t columns);
int main(void){
    // A:1 , G:2 , C:3, T:4
    int genesMatrix[50][50];//initializing the matrix
    createMatrix(*genesMatrix,50,50);//we create the matrix with random numbers
    printMatrix(genesMatrix,50,50);//we print our matrix
    int anemia[]={ 2, 2, 3, 1, 4, 1, 3, 4, 1, 2};//the mediterranean anemia sequence
    if(checkForPerfectMatch(genesMatrix,anemia,50,50)){//check whether there is a perfect match
        printf("Mediterranean anemia genes have been found in your DNA\n");
        return 0;
    }

    printf("\n\n\n");
    //there is no perfect match
    //rows go from 1 to 50
    //columns go from 1 to 50
    checkForPartialMatch(genesMatrix,anemia,50,50);//prints the location of the greatest similarity,


    return 0;


}


void createMatrix(int * genes, size_t rows, size_t columns){
    srand(time(NULL));
    for(int j =0 ; j<rows;j++){
        for(int k=0;k<columns;k++){
            *genes=1+rand()%4;
            ++genes;
        }
    }
}
void printMatrix(const int matrix[][50] , size_t rows , size_t columns){
    for(size_t i=0;i<rows;++i){
        for(size_t j=0;j<columns;++j){
            printf("%d ",matrix[i][j]);
        }
        puts("");
    }
}
int checkForPerfectMatch(const int matrix[][50],const int tar[] , size_t rows , size_t columns){
    int counter=0;
    int i=0, j=0,t=0;
    while(i<rows ){
        for(j=0;j<rows;++j){
            if(matrix[i][j] == tar[t]){
                counter++;
                if(counter==10){
                    printf("Spotted at %dth row from column %d to %d\n",(i+1),(j-8),(j+1));
                    return 1;
                }
                t++;
            }
            else{
                counter=0;
                t=0;
            }


        }
        i++;

    }
    return 0;
}
int checkForPartialMatch(const int matrix[][50],const int tar[],size_t rows, size_t columns){
    int max=0;
    int max_i,max_j;
    int counter=0;
    int i=0, j=0,t=0;
    int ratio;
    while(i<rows ){
        j=0;
        while((j+9)<columns){
            counter=0;
            t=0;
            int flag=j;
            for(;flag<=j+9;flag++){
                if(matrix[i][flag] == tar[t]){
                    counter++;
                }
                t++;
            }

            if(counter>max){
                max=counter;
                max_j=j;
                max_i=i;
                ratio=max*10;

            }
            j++;



        }
        i++;

    }

    if(ratio<40){
        printf("No similarities have been found\n");
        return 0;
    }

    printf("Similarity at the ratio of %d percent has been found at %dth row,"
           " from column %d to %d \n",ratio,max_i+1,max_j+1,max_j+10);
    return 0;



}
